basePath: /
definitions:
  handlers.ServiceHealth:
    properties:
      details:
        additionalProperties:
          type: string
        type: object
      service:
        type: string
      status:
        type: string
      timestamp:
        type: string
    type: object
  handlers.ServiceStatus:
    properties:
      message:
        type: string
      service:
        type: string
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  models.JWTTokens:
    properties:
      access_token:
        type: string
      expires_in:
        description: seconds until expiration
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 1
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      message:
        type: string
      tokens:
        $ref: '#/definitions/models.JWTTokens'
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      language:
        type: string
      last_name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 128
        minLength: 8
        type: string
      phone_number:
        type: string
      referred_by:
        description: UUID as string in request
        type: string
      timezone:
        type: string
      username:
        maxLength: 30
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  models.UserResponse:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      email:
        type: string
      email_status:
        type: boolean
      first_name:
        type: string
      id:
        type: string
      kyc_status:
        type: string
      language:
        type: string
      last_login_at:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
      phone_status:
        type: boolean
      role:
        type: string
      status:
        type: string
      timezone:
        type: string
      twofa_enabled:
        type: boolean
      updated_at:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: info@bixor.io
  description: High-performance trading backend API for cryptocurrency exchange operations
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Bixor Trading Engine API
  version: 1.0.0
paths:
  /:
    get:
      consumes:
      - application/json
      description: Get basic information about the Bixor Trading Engine
      produces:
      - application/json
      responses:
        "200":
          description: Landing page message
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Landing page
      tags:
      - General
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT tokens
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad request - validation errors
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - Authentication
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate new JWT tokens using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed successfully
          schema:
            $ref: '#/definitions/models.JWTTokens'
        "400":
          description: Bad request - validation errors
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized - invalid refresh token
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Refresh JWT tokens
      tags:
      - Authentication
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user account with email and password
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/models.UserResponse'
        "400":
          description: Bad request - validation errors
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict - user already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - Authentication
  /api/v1/health:
    get:
      consumes:
      - application/json
      description: Check the health status of all services including API and database
      produces:
      - application/json
      responses:
        "200":
          description: All services are healthy
          schema:
            items:
              $ref: '#/definitions/handlers.ServiceHealth'
            type: array
        "503":
          description: One or more services are unhealthy
          schema:
            items:
              $ref: '#/definitions/handlers.ServiceHealth'
            type: array
      summary: Health check for all services
      tags:
      - Monitoring
  /api/v1/info:
    get:
      consumes:
      - application/json
      description: Get detailed information about all available services and endpoints
      produces:
      - application/json
      responses:
        "200":
          description: API information with services and endpoints
          schema:
            additionalProperties: true
            type: object
      summary: API information
      tags:
      - General
  /api/v1/status:
    get:
      consumes:
      - application/json
      description: Get the current operational status of all services
      produces:
      - application/json
      responses:
        "200":
          description: All services are active
          schema:
            items:
              $ref: '#/definitions/handlers.ServiceStatus'
            type: array
        "503":
          description: One or more services are inactive
          schema:
            items:
              $ref: '#/definitions/handlers.ServiceStatus'
            type: array
      summary: Get status of all services
      tags:
      - Monitoring
schemes:
- http
- https
swagger: "2.0"
